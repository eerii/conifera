{"version":3,"sources":["services/contacts.js","components/Form.js","components/Search.js","components/Book.js","components/App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Form","contacts","setContacts","setNotification","timeout","setTheTimeout","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","map","name","toLowerCase","includes","key","Object","keys","find","number","window","confirm","changedContact","contactService","newContact","clearTimeout","catch","error","filter","n","message","contact","concat","setTimeout","addContact","value","onChange","target","type","Search","searchVal","setSearchVal","Button","contactName","onClick","c","Display","Book","search","searchContacts","Notification","notificationStyle","color","background","fontSize","borderRadius","padding","marginBottom","errorStyle","style","App","notification","useEffect","contactlist","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f8ae8e9.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getContact = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst newContact = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst changeNumber = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst deleteContact = id => {\n    return axios.delete(baseUrl + '/' + id)\n}\n\nexport default {getContact, newContact, changeNumber, deleteContact}","import React, {useState} from 'react'\nimport contactService from '../services/contacts'\n\nconst Form = ({contacts, setContacts, setNotification, timeout, setTheTimeout}) => {\n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n\n    const addContact = (event) => {\n        event.preventDefault()\n        if ((contacts.map(contacts => contacts.name.toLowerCase())).includes(newName.toLowerCase())) {\n            const key = Object.keys(contacts).find(key => contacts[key].name.toLowerCase() === newName.toLowerCase());\n            if (contacts[key].number !== newNumber) {\n                if (window.confirm(`${newName} is already in your phonebook. Do you want to change the old number ${contacts[key].number} for this new number ${newNumber}?`)) {\n                    const changedContact = { ...contacts[key], number: newNumber }\n                    contactService.changeNumber(changedContact.id, changedContact)\n                        .then(newContact => {\n                            setContacts(contacts.map(contacts => contacts.id !== changedContact.id ? contacts : newContact))\n                            setNotification([false, `The entry for ${newName} was updated`])\n                            if (timeout) {clearTimeout(timeout)}\n                        })\n                        .catch(error => {\n                            if (error.name === 'TypeError') {\n                                setNotification([true, `The entry for ${newName} has been removed from the server`])\n                                setContacts(contacts.filter(n => n.id !== changedContact.id))\n                            }\n                            else {\n                                setNotification([true, error.message])\n                            }\n                            if (timeout) {clearTimeout(timeout)}\n                        })\n                }\n            }\n            else {\n                setNotification([true, `Your phonebook already includes ${newName}`])\n                if (timeout) {clearTimeout(timeout)}\n            }\n        }\n        else {\n            const contactObj = {\n                name: newName,\n                number: newNumber\n            }\n\n            contactService.newContact(contactObj)\n                .then(contact => {\n                    setContacts(contacts.concat(contact))\n                    setNotification([false, `${newName} has been added to your phonebook!`])\n                    if (timeout) {clearTimeout(timeout)}\n                })\n                .catch(error => {\n                    setNotification([true, error.message])\n                    if (timeout) {clearTimeout(timeout)}\n                })\n        }\n\n        setNewName('')\n        setNewNumber('')\n\n        setTheTimeout(setTimeout(() => {\n            setNotification([false, ''])\n        }, 3000))\n    }\n\n    const onNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const onNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    return (\n        <form onSubmit={event => addContact(event)}>\n            <div>\n                Name: <input value={newName} onChange={onNameChange}/>\n            </div>\n            <div>\n                Phone Number: <input value={newNumber} onChange={onNumberChange}/>\n            </div>\n            <div>\n                <button type=\"submit\">Add Contact</button>\n            </div>\n        </form>\n    )\n}\n\nexport default Form","import React from 'react'\n\n\nconst Search = ({searchVal, setSearchVal}) => {\n    return (\n        <div>\n            Search: <input value={searchVal} onChange={event => setSearchVal(event.target.value)}/>\n        </div>\n    )\n}\n\nexport default Search","import React from \"react\";\nimport contactService from '../services/contacts'\n\nconst Button = ({name, id, contacts, setContacts, contactName, setNotification, timeout, setTheTimeout}) => {\n\n    const deleteThis = (event) => {\n        if (window.confirm(`Do you really want to delete ${contactName}?`)) {\n            contactService.deleteContact(id)\n                .then(() => {\n                    setNotification([true, `The entry for ${contactName} has been removed from the server`])\n                    if (timeout) {clearTimeout(timeout)}\n                    setContacts(contacts.filter(c => c.id !== id))\n                })\n                .catch(error => {\n                    setNotification([true, `The entry for ${contactName} has already been removed from the server`])\n                    if (timeout) {clearTimeout(timeout)}\n                    setContacts(contacts.filter(n => n.id !== id))\n                })\n        }\n        setTheTimeout(setTimeout(() => {\n            setNotification([false, ''])\n        }, 3000))\n    }\n\n    return (\n        <button onClick={event => deleteThis(event)}>{name}</button>\n    )\n}\n\nconst Display = ({name, number}) => {\n    return (\n        <p>{name}: {number}</p>\n    )\n}\n\nconst Book = ({contacts, setContacts, search, setNotification, timeout, setTheTimeout}) => {\n    const searchContacts = contacts.filter(contacts => contacts.name.toLowerCase().includes(search.toLowerCase()))\n\n    return (\n        <div>\n            {searchContacts.map(searchContacts =>\n                <div key={searchContacts.id}>\n                    <Display name={searchContacts.name} number={searchContacts.number}/>\n                    <Button name=\"Delete\" id={searchContacts.id} contacts={contacts} setContacts={setContacts} contactName={searchContacts.name} setNotification={setNotification} timeout={timeout} setTheTimeout={setTheTimeout}/>\n                </div>)}\n        </div>\n    )\n}\n\nexport default Book","import React, { useState, useEffect } from 'react'\nimport Form from './Form'\nimport Search from './Search'\nimport Book from './Book'\nimport contactService from '../services/contacts'\n\nconst Notification = ({ error, message }) => {\n    const notificationStyle = {\n        color: 'white',\n        background: 'green',\n        fontSize: 16,\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    const errorStyle = {...notificationStyle, background: 'red'}\n\n    if (!message) {\n        return null\n    }\n\n    return (\n        <div style={error ? errorStyle : notificationStyle}>\n            {message}\n        </div>\n    )\n}\n\nconst App = () => {\n    const [ contacts, setContacts ] = useState([])\n    const [ searchVal, setSearchVal ] = useState('')\n    const [ notification, setNotification ] = useState([false, ''])\n    const [ timeout, setTheTimeout ] = useState(null)\n\n    useEffect(() => {\n        //console.log(\"Effect\")\n        contactService.getContact().then(contactlist => {\n                //console.log(\"Promise fulfilled\")\n                setContacts(contactlist)\n            })\n    }, [])\n    //console.log(\"Render\", contacts.length, \"contacts\")\n\n    return (\n        <div id=\"page\">\n            <h1>Phonebook</h1>\n\n            <Notification error={notification[0]} message={notification[1]}/>\n\n            <h3>Add New</h3>\n            <Form contacts={contacts} setContacts={setContacts} setNotification={setNotification} timeout={timeout} setTheTimeout={setTheTimeout}/>\n\n            <h3>Contacts</h3>\n            <Search searchVal={searchVal} setSearchVal={setSearchVal}/>\n            <Book contacts={contacts} setContacts={setContacts} search={searchVal} setNotification={setNotification} timeout={timeout} setTheTimeout={setTheTimeout}/>\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}